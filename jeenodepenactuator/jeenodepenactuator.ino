// This one receives the zposition from the jeenodezdecoder
// there's a heartbeat generated by the jeenodezdecoder on digital pin 6
// (put an LED into it).  The actuator value goes out of pin 5 which is PWM
// On startup it cycles through 0 to 255 twice.  Then the first 
// Z value to come from the other jeenode is scaled to be at 500, 
// (then divided by 4 to be the midpoint of the actuator).

#include <JeeLib.h>

#define P(X) Serial.print(X)
#define PH(X) Serial.print(X, HEX)

const byte network = 212; // network group (can be in the range 1-255).
const byte myNodeID = 3; // unique node ID of receiver (1 through 30)
const byte freq = RF12_433MHZ; // Match freq to module
const byte RF12_NORMAL_SENDWAIT = 0;

const int payloadCount = 2; // the number of integers in the payload message
int payload[payloadCount];
int ledpin = 6; 
int actuatorpin = 5; 

int initialposition; 
bool binitialpositionset = false; 

void setup() 
{
    Serial.begin(9600);
    //pinMode(3, INPUT); 
    //pinMode(5, INPUT); 
    rf12_initialize(myNodeID, freq, network); // Initialize RFM12
    pinMode(ledpin, OUTPUT); 
    pinMode(actuatorpin, OUTPUT); 

    for (int i = 0; i < 2; i++) {
        P("actuate "); 
        P(i); 
        P("\n"); 
        for (int j = 0; j <= 255; j++) {
            analogWrite(actuatorpin, j); 
            delay(3); 
        }
        for (int j = 255; j >= 0; j--) {
            analogWrite(actuatorpin, j); 
            delay(3); 
        }
    }
}

int zpos = 0; 
int prevzpos; 
int ncount = 0; 
long livecount = 1000; 
int ledtoggle; 
void loop() 
{
    if (rf12_recvDone() && (rf12_crc == 0) && ((rf12_hdr & RF12_HDR_CTL) == 0)) {
        int *payload = (int*)rf12_data; // access rf12 data buffer as an arrya of ints
        zpos = payload[0]; 
        if (!binitialpositionset) {
            initialposition = zpos; 
            binitialpositionset = true; 
        }
        
        
        digitalWrite(ledpin, ((++ledtoggle) % 2 ? HIGH : LOW)); 
        
        int acval = min(max(0, (zpos - initialposition)+500), 1000); 
        analogWrite(actuatorpin, acval/4); 

        P(zpos);
        P(" ");
        P(payload[1]); 
        P(" ");
        P(acval); 
        P("\n");
        livecount = 200000; 
    } else {
        if (--livecount == 0) {
            digitalWrite(ledpin, (ledtoggle % 2 ? LOW : HIGH)); 
            delay(100); 
            digitalWrite(ledpin, (ledtoggle % 2 ? HIGH : LOW)); 
            livecount = 200000; 
            P("overflow livecount\n"); 
        }
    }
}




